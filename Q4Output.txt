1, KEYWORD_PUBLIC, public
1, KEYWORD_CLASS, class
1, IDENTIFIER, WeeJavaExample
1, LEFT_BRACE, {
3, KEYWORD_PUBLIC, public
3, KEYWORD_STATIC, static
3, KEYWORD_VOID, void
3, IDENTIFIER, main
3, LEFT_PAREN, (
3, KEYWORD_STRING, String
3, LEFT_BRACKET, [
3, RIGHT_BRACKET, ]
3, IDENTIFIER, args
3, RIGHT_PAREN, )
3, LEFT_BRACE, {
5, KEYWORD_INT, int
5, IDENTIFIER, a
5, OP_ASSIGN, =
5, INTEGER, 100
5, SEMICOLON, ;
6, KEYWORD_INT, int
6, IDENTIFIER, b
6, OP_ASSIGN, =
6, INTEGER, 2
6, SEMICOLON, ;
7, KEYWORD_INT, int
7, IDENTIFIER, c
7, OP_ASSIGN, =
7, INTEGER, 154
7, OP_MOD, %
7, INTEGER, 3
7, SEMICOLON, ;
8, KEYWORD_INT, int
8, IDENTIFIER, d
8, OP_ASSIGN, =
8, IDENTIFIER, a
8, OP_ADD, +
8, IDENTIFIER, b
8, OP_SUBTRACT, -
8, HOBBITS_DO, HobbitsDo
8, LEFT_PAREN, (
8, IDENTIFIER, c
8, COMMA, ,
8, INTEGER, 4
8, RIGHT_PAREN, )
8, OP_DIVIDE, /
8, INTEGER, 5
8, SEMICOLON, ;
10, KEYWORD_INT, int
10, IDENTIFIER, result
10, OP_ASSIGN, =
10, INTEGER, 0
10, SEMICOLON, ;
12, KEYWORD_IF, if
12, LEFT_PAREN, (
12, IDENTIFIER, d
12, OP_GREATEREQUAL, >=
12, IDENTIFIER, a
12, RIGHT_PAREN, )
12, LEFT_BRACE, {
13, KEYWORD_IF, if
13, LEFT_PAREN, (
13, IDENTIFIER, d
13, OP_EQUAL, ==
13, INTEGER, 100
13, RIGHT_PAREN, )
13, IDENTIFIER, result
13, OP_ASSIGN, =
13, IDENTIFIER, a
13, SEMICOLON, ;
14, KEYWORD_ELSE, else
14, KEYWORD_IF, if
14, LEFT_PAREN, (
14, IDENTIFIER, d
14, OP_LESSEQUAL, <=
14, INTEGER, 700
14, RIGHT_PAREN, )
14, IDENTIFIER, result
14, OP_ASSIGN, =
14, INTEGER, 700
14, SEMICOLON, ;
15, KEYWORD_ELSE, else
15, KEYWORD_IF, if
15, LEFT_PAREN, (
15, IDENTIFIER, d
15, OP_LESS, <
15, INTEGER, 1000
15, RIGHT_PAREN, )
15, IDENTIFIER, result
15, OP_ASSIGN, =
15, INTEGER, 1000
15, SEMICOLON, ;
16, RIGHT_BRACE, }
16, KEYWORD_ELSE, else
16, KEYWORD_IF, if
16, LEFT_PAREN, (
16, IDENTIFIER, d
16, OP_GREATER, >
16, INTEGER, 0
16, RIGHT_PAREN, )
16, LEFT_BRACE, {
17, IDENTIFIER, result
17, OP_ASSIGN, =
17, IDENTIFIER, a
17, SEMICOLON, ;
18, RIGHT_BRACE, }
18, KEYWORD_ELSE, else
18, KEYWORD_IF, if
18, LEFT_PAREN, (
18, IDENTIFIER, d
18, OP_NOTEQUAL, !=
18, INTEGER, 0
18, RIGHT_PAREN, )
18, LEFT_BRACE, {
19, IDENTIFIER, result
19, OP_ASSIGN, =
19, INTEGER, 0
19, SEMICOLON, ;
20, RIGHT_BRACE, }
22, IDENTIFIER, dummy
22, LEFT_PAREN, (
22, RIGHT_PAREN, )
22, SEMICOLON, ;
23, IDENTIFIER, dummy
23, LEFT_PAREN, (
23, IDENTIFIER, result
23, RIGHT_PAREN, )
23, SEMICOLON, ;
25, RIGHT_BRACE, }
27, KEYWORD_PUBLIC, public
27, KEYWORD_STATIC, static
27, KEYWORD_VOID, void
27, IDENTIFIER, dummy
27, LEFT_PAREN, (
27, RIGHT_PAREN, )
27, LEFT_BRACE, {
28, KEYWORD_STRING, String
28, IDENTIFIER, s
28, OP_ASSIGN, =
28, STRING, "I'm going on an adventure!"
28, SEMICOLON, ;
29, HOBBITS_SAY, HobbitsSay
29, LEFT_PAREN, (
29, IDENTIFIER, s
29, RIGHT_PAREN, )
29, SEMICOLON, ;
30, RIGHT_BRACE, }
32, KEYWORD_PUBLIC, public
32, KEYWORD_STATIC, static
32, KEYWORD_VOID, void
32, IDENTIFIER, dummy
32, LEFT_PAREN, (
32, KEYWORD_INT, int
32, IDENTIFIER, x
32, RIGHT_PAREN, )
32, LEFT_BRACE, {
33, HOBBITS_SAY, HobbitsSay
33, LEFT_PAREN, (
33, STRING, "dummy: "
33, OP_ADD, +
33, IDENTIFIER, x
33, RIGHT_PAREN, )
33, SEMICOLON, ;
34, RIGHT_BRACE, }
36, RIGHT_BRACE, }
